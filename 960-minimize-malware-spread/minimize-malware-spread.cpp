class Solution {
public:
    void dfs(vector<vector<int>>& adj,int curr,int dfs_node,vector<vector<bool>>& initVisited){
        
        initVisited[dfs_node][curr]=true;
        for(auto it: adj[curr]){
            if(!initVisited[dfs_node][it]){
                dfs(adj,it,dfs_node,initVisited);
            }
        }

    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        vector<vector<bool>> initVisited(initial.size(),vector<bool>(n,false));
        vector<vector<int>> adjList(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==1&&i!=j){
                    adjList[i].push_back(j);
                }
            }
        }
        for(int i=0;i<initial.size();i++){
            dfs(adjList,initial[i],i,initVisited);//currNode, currDFS node
        }
        vector<int> infected(n,false);
        for(int i=0;i<n;i++){
            int count=0;
            for(int j=0;j<initial.size();j++){
                if(initVisited[j][i]){
                    count++;
                }
            }
            if(count>1) infected[i]=true;//it's anyways infected
        }
        vector<int> initAns(initial.size(),0);

        int ansNode=initial[0],ansCount=INT_MIN;
        for(int i=0;i<initial.size();i++){
            for(int j=0;j<n;j++){
                if(!infected[j]&&initVisited[i][j]){
                    initAns[i]++;
                }
            }
            if(initAns[i]>ansCount){
                ansNode=initial[i];
                ansCount=initAns[i];
            }
            if(initAns[i]==ansCount&&initial[i]<ansNode){
                ansNode=initial[i];
            }
        }


        return ansNode;
    }
};